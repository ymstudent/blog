<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云起</title>
    <link>https://ymfeb.cn/</link>
    <description>Recent content on 云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 31 Dec 2020 22:51:32 +0800</lastBuildDate><atom:link href="https://ymfeb.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redis的Server结构与过期键处理</title>
      <link>https://ymfeb.cn/posts/redis/redisserver/</link>
      <pubDate>Thu, 31 Dec 2020 22:51:32 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/redisserver/</guid>
      <description>redis 服务器将所有数据库都保存在 redisServer 结构的 db 数组中，db 数组的每个项都是一个 redisDb 结构，每个 redisDb 结构代表一个数据库。 redisServer的结构 typedef struct redisServer { //***** //一个数组，保存服务器中的所有数据库 redisDb *db ; //服务器数据</description>
    </item>
    
    <item>
      <title>redis五种对象的底层实现</title>
      <link>https://ymfeb.cn/posts/redis/redisobject/</link>
      <pubDate>Sun, 27 Dec 2020 17:57:11 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/redisobject/</guid>
      <description>redis 使用对象来表示数据库中的键和值，键总是一个字符串对象，而值则是字符串对象、列表对象、哈希对象、集合对象、有序集合对象中的一个。下面是 redis 对象的数据结构： //redis对象的结构 typedef struct redisObject { //类型 unsigned type:4; //</description>
    </item>
    
    <item>
      <title>redis数据结构之压缩列表</title>
      <link>https://ymfeb.cn/posts/redis/ziplist/</link>
      <pubDate>Fri, 25 Dec 2020 22:26:22 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/ziplist/</guid>
      <description>压缩列表是列表键和哈希键的底层实现之一。它是 redis 为了节约内存而开发的，由一系列特殊编码的连续内存块组成的顺序型数据结构。 压缩列表的实现 一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个</description>
    </item>
    
    <item>
      <title>redis数据结构之整数集合</title>
      <link>https://ymfeb.cn/posts/redis/intset/</link>
      <pubDate>Sat, 19 Dec 2020 23:04:04 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/intset/</guid>
      <description>整数集合是Reids集合键的底层实现之一，它可以保存类型为int16_t, int32_t或者int64_t的整数值，并且保证集合中不会出现重复元素。 Redis整数集合的实现 typedef struct inset { //编码方式, 决定c</description>
    </item>
    
    <item>
      <title>redis数据结构之跳跃表</title>
      <link>https://ymfeb.cn/posts/redis/skiplist/</link>
      <pubDate>Sat, 19 Dec 2020 21:42:07 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/skiplist/</guid>
      <description>跳跃表（skiplist）是一种有序数据结构，他通过节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。 跳跃表支持平均O（logN），最坏O（N）复杂度的节点查找，还可以通过顺序操作来批量处</description>
    </item>
    
    <item>
      <title>redis数据结构之字典</title>
      <link>https://ymfeb.cn/posts/redis/hashtable/</link>
      <pubDate>Mon, 14 Dec 2020 22:28:21 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/hashtable/</guid>
      <description>redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希节点，而每个哈希节点就保存了字典中的一个键值对。 Redis字典的结构 //redis字典 typedef struct dict { //类型特定函数，保存了一簇操作特定类</description>
    </item>
    
    <item>
      <title>redis数据结构之链表</title>
      <link>https://ymfeb.cn/posts/redis/linkedlist/</link>
      <pubDate>Sun, 13 Dec 2020 13:01:53 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/linkedlist/</guid>
      <description>链表被广泛用于实现redis的各种功能，如：列表键，发布与订阅，慢查询，监视器等 Redis链表的结构 //单节点 typedef struct listNode { //前置节点 struct listNode * prev ; //后置节点 struct listNode * next ; //节点值 void * value ; } listNode ; //redis</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://ymfeb.cn/about/</link>
      <pubDate>Sun, 13 Dec 2020 10:09:33 +0800</pubDate>
      
      <guid>https://ymfeb.cn/about/</guid>
      <description>北漂一码农</description>
    </item>
    
    <item>
      <title>redis数据结构之简单动态字符串</title>
      <link>https://ymfeb.cn/posts/redis/sds_struct/</link>
      <pubDate>Sat, 12 Dec 2020 22:43:39 +0800</pubDate>
      
      <guid>https://ymfeb.cn/posts/redis/sds_struct/</guid>
      <description>简单动态字符串（Simple Dynamic String）: 简称SDS, 是redis默认的字符串表示，除了用来保存数据库中的字符串值外，还被用作缓冲区（buffer），eg: AOF缓冲区，客户端的输入缓冲区 SDS的</description>
    </item>
    
  </channel>
</rss>
